Stack contents are topmost last.

add
	Description :  Arithmetic addition of two values. The result is Float if at least one value is Float, Int otherwise.
	Stack in : Int/Float (a) , Int/Float (b)
	Stack out : Int/Float (a+b)
__addCompileMethod:Label
	Description : Add a node visit method for node name (name) to the compiler.
	Stack in : String (name)
	Stack out : -
add:Float
	Description : Arithmetic addition of two values. Result is Float. 
	Stack in : Int/Float (a)
	Stack out : Float (a+arg)
add:Int
	Description : Arithmetic addition of two values. Result is Float if the other value is Float, Int otherwise.
	Stack in : Int/Float (a)
	Stack out : Int/Float (a+b)
addSym
	Description : Add a symbol to a symbol table.
	Stack in : SymTab (symbol table), String (symbol)
	Stack out : -
and
	Description : Boolean and.
	Stack in : Int (a), Int (b)
	Stack out : Int (a&&b)
and:Int
	Description : Boolean and.
	Stack in : Int (a)
	Stack out : Int (a&&arg)
arrayGet
	Description : Get element by index in an Array/Map.
	Stack in : Array/Map (a), Int (i)
	Stack out : any (a[i])
arrayGet:Int
	Description : Get element by index in an Array/Map.
	Stack in : Array/Map (a)
	Stack out : any (a[arg])
arrayNew
	Description : Spawn a new Array.
	Stack in : -
	Stack out : Array
arrayResv
	Description : Reserve space in an Array.
	Stack in : Array (a), Int (size)
	Stack out : -
arrayResv:Int
	Description : Reserve space in an Array. 
	Stack in : Array (a)
	Stack out : -
arraySet
	Description : Set element in an Array/Map.
	Stack in : Array/Map (a), any (value), Int (index)
	Stack out : Array/Map (a)
arraySet:Int
	Description : Set element in an Array/Map.
	Stack in : Array/Map (a), any (value)
	Stack out : Array/Map (a)
arraySize
	Description : Get actual size of an Array.
	Stack in : Array (a)
	Stack out : Int (size(a))
astCompileChild
	Description : Recursively compile n-th child of the current node.
	Stack in : Int (n)
	Stack out : -
astCompileChild:Int
	Description : Recursively compile arg-th child of the current node. 
	Stack in : -
	Stack out : -
astGetChildrenCount
	Description : Get the children count for current node. 
	Stack in : -
	Stack out : Int (count)
astGetChildString
	Description : Get the n-th child string (node name or immediate string if leaf) in current node.
	Stack in : Int (n)
	Stack out : String
astGetChildString:Int
	Description : Get the arg-th child string (node name or immediate string if leaf) in current node.
	Stack in : -
	Stack out : String
astGetCol
	Description : Get the column where this node originated in source text.
	Stack in : -
	Stack out : Int (column)
astGetOp
	Description : Get the current node name.
	Stack in : -
	Stack out : String
astGetRow
	Description : Get the line number where this node originated in source text.
	Stack in : -
	Stack out : Int (line number)
call
	Description : Call a dynamic function object.
	Stack in : DynFun (function)
	Stack out : ? (function return values if any)
call:Label
	Description : Call a static function at label.
	Stack in : -
	Stack out : ? (function return values if any)
call_vc
	Description : Call a dynamic function object with a Virtual Closure.
	Stack in : Array/VObj (closure), DynFun (function)
	Stack out : ? (function return values if any)
charAt
	Description : Get character at n-th position in string s.
	Stack in : String (s), Int (n)
	Stack out : Char
charAt:Int
	Description : Get character at arg-th position in string s.
	Stack in : String (s)
	Stack out : Char
chr
	Description : Convert Int into Char.
	Stack in : Int
	Stack out : Char
chr:Int
	Description : Convert Int into Char.
	Stack in : -
	Stack out : Char
clone
	Description : Clone a value. Some objects may actually clone to themselves.
	Stack in : any (value)
	Stack out : any (value clone)
compileFileToThread
	Description : Compile the file filename in a new compilation context and spawn a thread object running the newly compiled program with priority value prio.
	Stack in : String (filename), Int (prio)
	Stack out : Thread
compileFileToThread:Int
	Description : Compile the file filename in a new compilation context and spawn a thread object running the newly compiled program with priority value arg.
	Stack in : String (filename)
	Stack out : Thread
compileStateDone
	Description : Tell the compiler or walker the compilation is done and successful.
	Stack in : -
	Stack out : -
compileStateDown
	Description : Tell the compiler or walker to enter the current node and process all children in sequence. 
	Stack in : -
	Stack out : -
compileStateError
	Description : Tell the compiler or walker the compilation has failed. 
	Stack in : -
	Stack out : -
compileStateNext
	Description : Tell the compiler or walker to process next node (also synonym for state Done if last node in tree). 
	Stack in : -
	Stack out : -
compileStateUp
	Description : Tell the compiler or walker to exit this node and process the next sibling of the parent node.
	Stack in : -
	Stack out : -
compileString
	Description : Compile the given string in the current compilation context.
	Stack in : String
	Stack out : -
compileStringToThread
	Description : Compile the string s in a new compilation context and spawn a thread object running the newly compiled program with priority value prio.
	Stack in : String (s), Int (prio)
	Stack out : Thread
compileStringToThread:Int
	Description : Compile the string s in a new compilation context and spawn a thread object running the newly compiled program with priority value arg.
	Stack in : String (s)
	Stack out : Thread
cos
	Description : Compute cosinus of value.
	Stack in : Float (x)
	Stack out : Float (cos(x))
crit_begin
	Description : Start a critical section (thread can't be interrupted).
	Stack in : -
	Stack out : -
crit_end
	Description : End a critical section (thread can be interrupted). 
	Stack in : -
	Stack out : -
dec
	Description : Decrease value. 
	Stack in : Int (v)
	Stack out : Int (v-1)
div
	Description : Divide two values. Like any other arithmetic operator, result is Float if at least one value is Float, Int otherwise.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int/Float (a/b)
div:Float
	Description : Divide two values.
	Stack in : Int/Float (a)
	Stack out : Float (a/arg)
div:Int
	Description : Divide two values. Result is Float if value is Float, Int otherwise.
	Stack in : Int/Float (a)
	Stack out : Int/Float (a/arg)
doWalk
	Description : Walk the current subtree with a user-defined walker.
	Stack in : String (walkername)
	Stack out : -
doWalk:String
	Description : Walk the current subtree with a user-defined walker.
	Stack in : -
	Stack out : -
dup:Int
	Description : Push again arg-th value in data stack onto stack top.
	Stack in : -
	Stack out : any
dynFunAddClosure
	Description : Add an enclosed value to a function object.
	Stack in : DynFun, any (value)
	Stack out : DynFun (the same object)
dynFunNew:Label
	Description : Create a function object pointing to code at given label.
	Stack in : -
	Stack out : DynFun
enter:Int
	Description : Allocate arg variables in local variables stack.
	Stack in : -
	Stack out : -
envAdd
	Description : Add a value to the VM environment.
	Stack in : any (value), String (key)
	Stack out : -
envGet
	Description : Get a value from the VM environment. Access is done via hashtable. Dynamic but slower.
	Stack in : String (key)
	Stack out : any (env[key])
envGet:EnvSym
	Description : Get a value from the VM environment. Indexed access (symbol name is resolved when program is loaded/compiled). Static but faster.
	Stack in : -
	Stack out : any (env[key])
envLookup
	Description : Lookup index of key in the VM environment.
	Stack in : String (key)
	Stack out : Int (index)
envSet:EnvSym
	Description : Set value for _existing_ key in the VM environment. Indexed access.
	Stack in : any (value)
	Stack out : -
eq
	Description : Compare two numeric values.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int (a==b)
exp
	Description : Exponential function.
	Stack in : Int/Float (x)
	Stack out : Float (e^x)
getClosure
	Description : Get n-th enclosed value in function object.
	Stack in : DynFun, Int (n)
	Stack out : any
getClosure:Int
	Description : Get arg-th enclosed value in current context.
	Stack in : -
	Stack out : any
getException
	Description : Get exception value that was raised.
	Stack in : -
	Stack out : any
getmem
	Description : Get value at offset n in thread locals (n<0) or program data segment (n>=0).
	Stack in : Int (n)
	Stack out : any
getmem:Int
	Description : Get value at offset arg in thread locals (arg<0) or program data segment (n>=0).
	Stack in : -
	Stack out : any
getPid
	Description : Get current thread object.
	Stack in : -
	Stack out : Thread
getSym
	Description : Get symbol offset by name in a symbol table.
	Stack in : SymTab, String
	Stack out : Int (-1 if not found, > 0 otherwise)
getSymName
	Description : Get symbol name by offset in a symbol table.
	Stack in : SymTab, Int
	Stack out : String
_get_timeslice
	Description : Get the current value of the scheduler's time slice.
	Stack in : -
	Stack out : Int
inc
	Description : Increase value.
	Stack in : Int (i)
	Stack out : Int (i+1)
inf
	Description : Compare two numeric values.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int (a<b)
infEq
	Description : Compare two numeric values.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int (a<=b)
instCatcher:Label
	Description : Install an exception catch bloc starting at label.
	Stack in : -
	Stack out : -
jmp:Label
	Description :  Jump to label.
	Stack in : -
	Stack out : -
joinThread
	Description : Wait for given thread to terminate. 
	Stack in : Thread
	Stack out : -
killThread
	Description : Terminate given thread at once.
	Stack in : Thread
	Stack out : -
_langDef:String
	Description : Add given rules to the VM grammar. 
	Stack in : -
	Stack out : -
_langPlug:String
	Description : Plug node named arg into given node. Refer to tinyap documentation for details.
	Stack in : String (node name to plug into)
	Stack out : -
leave:Int
	Description : deallocate variables from locals stack.
	Stack in : -
	Stack out : -
lockMtx
	Description : Lock a Mutex. Will interrupt thread if mutex is already locked.
	Stack in : Mutex
	Stack out : -
lockMtx:Int
	Description : Lock Mutex at offset arg in memory (locals if arg<0, data segment if n>=0). Prevents race condition that exists in equivalent sequence "getmem N lockMtx". Will interrupt thread if mutex is already locked.
	Stack in : -
	Stack out : -
log
	Description : Natural logarithm function.
	Stack in : Int/Float (a)
	Stack out : Float (log(a))
log:Float
	Description : Natural logarithm function.
	Stack in : -
	Stack out : Float (log(arg))
mapGet
	Description : Get value by key in Map.
	Stack in : Map (m), String (key)
	Stack out : any (m[key])
mapGet:String
	Description : Get value by key in Map.
	Stack in : Map (m)
	Stack out : any (m[arg])
mapHasKey
	Description : Test if map contains key k.
	Stack in : Map (m), String (k)
	Stack out : Int (1 if m has key, 0 otherwise)
mapHasKey:String
	Description : Test if map contains key arg.
	Stack in : Map (m)
	Stack out : Int (1 if m has key, 0 otherwise)
mapNew
	Description : Spawn a new Map object.
	Stack in : -
	Stack out : Map
mapSet
	Description : Set value for key k in a Map.
	Stack in : any (value), Map (m), String (k)
	Stack out : -
mapSet:String
	Description : Set value for key arg in a Map.
	Stack in : any (value), Map (m)
	Stack out : -
mod
	Description : Arithmetic modulo of two values. Result is Float if at least one value is Float, Int otherwise.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int/Float (a mod b)
mod:Float
	Description : Arithmetic modulo of two values. Result is Float.
	Stack in : Int/Float (a)
	Stack out : Float (a mod arg)
mod:Int
	Description : Arithmetic modulo of two values. Result is Float if given value is Float, Int otherwise.
	Stack in : Int/Float (a)
	Stack out : Int/Float (a mod arg)
mul
	Description : Multiply two numeric values.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int/Float (a*b)
mul:Float
	Description : Multiply two numeric values.
	Stack in : Int/Float (a)
	Stack out : Int/Float (a*arg)
mul:Int
	Description : Multiply two numeric values.
	Stack in : Int/Float (a)
	Stack out : Int/Float (a*arg)
nEq
	Description : Compare two numeric values.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int (a!=b)
newMtx
	Description : Spawn a new Mutex object.
	Stack in : -
	Stack out : Mutex
newSymTab
	Description : Spawn a new symbol table object.
	Stack in : -
	Stack out : SymTab
newThread
	Description : Create a new thread using a dynamic function object with priority p.
	Stack in : Int (p), DynFun
	Stack out : Thread
newThread:Label
	Description : Create a new thread using label with priority p.
	Stack in : Int (p)
	Stack out : Thread
not
	Description : Boolean negation.
	Stack in : Int (x)
	Stack out : Int (!x)
onCompInit
	Description : Register a dynamic function to be run when a new compilation context is initialized.
	Stack in : DynFun
	Stack out : -
onCompTerm
	Description : Register a dynamic function to be run when a compilation context is terminated. 
	Stack in : DynFun
	Stack out : -
or
	Description : Boolean or. 
	Stack in : Int (a), Int (b)
	Stack out : Int (a||b)
ord
	Description : Convert Char to Int.
	Stack in : Char
	Stack out : Int
ord:Char
	Description : Convert Char to Int.
	Stack in : -
	Stack out : Int
or:Int
	Description : Boolean or.
	Stack in : Int (a)
	Stack out : Int (a||arg)
pop
	Description : Pop value from data stack.
	Stack in : any
	Stack out : -
_pop_curNode
	Description : DEPRECATED. DO NOT USE.
	Stack in : -
	Stack out : -
pop:Int
	Description : Pop arg values from data stack.
	Stack in : any [arg times]
	Stack out : -
popN
	Description : Pop n values from data stack. 
	Stack in : any [n times], Int (n)
	Stack out : -
pow
	Description : Power function.
	Stack in : Int/Float (a), Int/Float (b)
	Stack out : Int/Float (a to the power of b)
pp_curNode
	Description : Prettyprint current AST node.
	Stack in : -
	Stack out : -
print
	Description : print n values to standard output. 
	Stack in : any [n times], Int (n)
	Stack out : -
print:Int
	Description : print arg values to standard output. 
	Stack in : any [arg times]
	Stack out : -
push:Char
	Description : Push immediate value onto data stack.
	Stack in : -
	Stack out : Char
push:Float
	Description : Push immediate value onto data stack.
	Stack in : -
	Stack out : Float
push:Int
	Description : Push immediate value onto data stack.
	Stack in : -
	Stack out : Int
push:String
	Description : Push immediate value onto data stack.
	Stack in : -
	Stack out : String
regGet
	Description : Get value of n-th register in current thread.
	Stack in : Int (n)
	Stack out : any (thread_registers[n])
regGet:Int
	Description : Get value of arg-th register in current thread.
	Stack in : -
	Stack out : any (thread_registers[arg])
regSet
	Description : Set value of n-th register in current thread.
	Stack in : any (v), Int (n)
	Stack out : - (thread_registers[arg]=v)
regSet:Int
	Description : Set value of arg-th register in current thread.
	Stack in : any (v)
	Stack out : - (thread_registers[arg]=v)
ret:Int
	Description : Clean the data stack and return from call or terminate thread if no call to return from.
	Stack in : any [arg times]
	Stack out : -
retval:Int
	Description : Clean the data stack, retaining topmost value and return from call or terminate thread if no call to return from.
	Stack in : any [arg times], any (return value)
	Stack out : any (return value)
setCharAt
	Description : Set character at position n in string.
	Stack in : String, Char, Int (n)
	Stack out : -
setCharAt:Int
	Description :Set character at position arg in string. 
	Stack in : String, Char
	Stack out : -
setClosure
	Description : Set value of n-th enclosed value in current context. 
	Stack in : any (value), Int (index)
	Stack out : -
setClosure:Int
	Description : Set value of arg-th enclosed value in current context.
	Stack in : any (value)
	Stack out : -
setmem
	Description : Set value at offset n in memory (locals if n<0, data segment if n>=0).
	Stack in : any (value), Int (offset)
	Stack out : -
setmem:Int
	Description : Set value at offset arg in memory (locals if arg<0, data segment if arg>=0).
	Stack in : any (value)
	Stack out : -
_set_timeslice
	Description : Set the value of the scheduler's time slice.
	Stack in : Int
	Stack out : -
_set_timeslice:Int
	Description : Set the value of the scheduler's time slice. 
	Stack in : -
	Stack out : -
shl
	Description : Bitwise left shift.
	Stack in : Int (x), Int (n)
	Stack out : Int (x<<n)
shl:Int
	Description : Bitwise left shift.
	Stack in : Int (x)
	Stack out : Int (x<<arg)
shr
	Description : Bitwise right shift.
	Stack in : Int (x), Int (n)
	Stack out : Int (x>>n)
shr:Int
	Description : Bitwise right shift.
	Stack in : Int (x)
	Stack out : Int (x>>arg)
sin
	Description : Sine function.
	Stack in : Int/Float (x)
	Stack out : Float (sin(x))
SNZ
	Description : Skip next instruction if value is Non-Zero.
	Stack in : Int (value)
	Stack out : -
sqrt
	Description : Square root function.
	Stack in : Int/Float (x)
	Stack out : Float (sqrt(x))
stackNew
	Description : Spawn a new Stack object.
	Stack in : -
	Stack out : Stack
stackPeek
	Description : Peek n-th value in stack.
	Stack in : Stack, Int (n)
	Stack out : any
stackPeek:Int
	Description : Peek arg-th value in stack.
	Stack in : Stack
	Stack out : any
stackPop
	Description : Pop value from top of stack.
	Stack in : Stack
	Stack out : -
stackPop:Int
	Description : Pop arg values from top of stack. 
	Stack in : Stack
	Stack out : -
stackPush
	Description : Push value onto top of stack. 
	Stack in : Stack, any (value)
	Stack out : -
stackSize
	Description : Get size of stack object. 
	Stack in : Stack
	Stack out : Int (size)
strcat
	Description : Concatenate two strings.
	Stack in : String (a), String (b)
	Stack out : String (strcat(a, b))
strcat:String
	Description : Concatenate two strings.
	Stack in : String (a)
	Stack out : String (strcat(a, arg))
strcmp
	Description : Compare two strings.
	Stack in : String (a), String (b)
	Stack out : Int (strcmp(a, b))
strcmp:String
	Description : Compare two strings.
	Stack in : String (a)
	Stack out : Int (strcmp(a, arg))
strdup
	Description : Duplicate a string.
	Stack in : String (a)
	Stack out : String (strdup(a))
strdup:String
	Description : Duplicate a string.
	Stack in : -
	Stack out : String (strdup(arg))
strlen
	Description : Get length of string.
	Stack in : String
	Stack out : Int
sub
	Description : 
	Stack in :
	Stack out :
sub:Float
	Description : 
	Stack in :
	Stack out :
sub:Int
	Description : 
	Stack in :
	Stack out :
substr
	Description : 
	Stack in :
	Stack out :
sup
	Description : 
	Stack in :
	Stack out :
supEq
	Description : 
	Stack in :
	Stack out :
swap:Int
	Description : 
	Stack in :
	Stack out :
symTabSz
	Description : 
	Stack in :
	Stack out :
SZ
	Description : 
	Stack in :
	Stack out :
tan
	Description : 
	Stack in :
	Stack out :
throw
	Description : 
	Stack in :
	Stack out :
toF
	Description : 
	Stack in :
	Stack out :
toI
	Description : 
	Stack in :
	Stack out :
toS
	Description : 
	Stack in :
	Stack out :
uninstCatcher:Label
	Description : 
	Stack in :
	Stack out :
unlockMtx
	Description : 
	Stack in :
	Stack out :
unlockMtx:Int
	Description : 
	Stack in :
	Stack out :
_vm_prog_get_globals
	Description : 
	Stack in :
	Stack out :
vshl
	Description : 
	Stack in :
	Stack out :
vshr
	Description : 
	Stack in :
	Stack out :
walkChild
	Description : 
	Stack in :
	Stack out :
walkChild:Int
	Description : 
	Stack in :
	Stack out :
write_data
	Description : 
	Stack in :
	Stack out :
write_label
	Description : 
	Stack in :
	Stack out :
write_label:String
	Description : 
	Stack in :
	Stack out :
write_oc
	Description : 
	Stack in :
	Stack out :
write_ocChar
	Description : 
	Stack in :
	Stack out :
write_ocChar:String
	Description : 
	Stack in :
	Stack out :
write_ocEnvSym
	Description : 
	Stack in :
	Stack out :
write_ocEnvSym:String
	Description : 
	Stack in :
	Stack out :
write_ocFloat
	Description : 
	Stack in :
	Stack out :
write_ocFloat:String
	Description : 
	Stack in :
	Stack out :
write_ocInt
	Description : 
	Stack in :
	Stack out :
write_ocInt:String
	Description : 
	Stack in :
	Stack out :
write_ocLabel
	Description : 
	Stack in :
	Stack out :
write_ocLabel:String
	Description : 
	Stack in :
	Stack out :
write_ocString
	Description : 
	Stack in :
	Stack out :
write_oc:String
	Description : 
	Stack in :
	Stack out :
write_ocString:String
	Description : 
	Stack in :
	Stack out :
xor
	Description : 
	Stack in :
	Stack out :
xor:Int
	Description : 
	Stack in :
	Stack out :
yield
	Description : 
	Stack in :
	Stack out :

