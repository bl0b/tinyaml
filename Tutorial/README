This tutorial explains the basic features of tinyaml step by step.

There are currently 4 sections :

I.   Basics
	This section covers the syntax of the core assembly language and the
	basic features of the VM, such as dynamic function objects and
	exception handling.

II.  Layers
	This section covers the following language layers :
	- Symbolic assembly
		Where one can define symbolic names for global and local
		variables and structured types. This layer also defines
		If..Then..Endif and If..Then..Else..Endif constructs.
	- Procedural assembly
		Where one can define functions/procedures in an easier way.
	- Script language
		A light scripting language inspired by Lua and Python in
		some ways.
	There is one layer not covered here, which is actually used by all
	these layers : the Meta-assembly language. Its purpose is to help
	writing compilers, so it is covered in the third section.

III. Writing compilers
	This section covers the basics of writing new language layers, or
	plain new languages, with tinyaml.
	The best examples to this are the existing layers themselves, found in
	the subdirectories ml/layers/*/.
	But we go step by step here with a small math expressions compiler.
	BTW, knowing how the meta-parser tinyap works is quite a requirement to
	fully understand this section, because it's this component that handles
	the language grammars.

IV.  Writing extensions
	This section covers how to include new libraries in tinyaml to extend
	the VM.
	The best examples here again are the already defined extensions, mainly
	the MessageQueue extension (in subdirectory extensions/MessageQueue),
	which is relatively simple.
	But once again we will go step by step here to define, compile, and use
	a dummy extension.


