# TinyaML
# Copyright (C) 2007 Damien Leroux
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

asm nop nop end

language
	meta_asm ::= "<<" (meta_data|meta_label|meta_opcode)+ ">>".
	meta_data ::= "[" meta_data_piece+ "]".
	meta_data_piece ::= meta_value ("rep" (meta_inline|meta_int))?.
	meta_value ::= ( meta_string | meta_float | meta_int | meta_inline ).
	meta_label ::= meta_elem ":".
	meta_opcode = [meta_elem] meta_oc_arg.
	meta_inline ::= "(" asm_statement+ ")".
	meta_elem = ( meta_inline | meta_sym ).
	meta_sym ::= sym.
	meta_oc_arg =	( meta_oc_float
			| meta_oc_int
			| meta_oc_char
			| meta_oc_string
			| meta_oc_label
			| meta_oc_envsym
			| meta_oc_noarg
			).

	meta_oc_int ::= ( meta_int | "i" meta_inline ).
	meta_oc_char ::= ( meta_float | "c" meta_inline ).
	meta_oc_float ::= ( meta_float | "f" meta_inline ).
	meta_oc_string ::= ( meta_string | "s" meta_inline ).
	meta_oc_label ::= ( meta_label_arg | "l" meta_inline ).
	meta_oc_envsym ::= ( meta_envsym_arg | "e" meta_inline ).
	meta_oc_noarg ::= _epsilon.

	meta_int ::= int.
	meta_float ::= float.
	meta_string ::= string.
	meta_char ::= char.
	meta_label_arg ::= ( "@" sym | /[+-][0-9]+/ ).
	meta_envsym_arg ::= "&" sym.
end

plug meta_asm into p_Opcode


compile meta_asm
asm
	#pp_curNode
	compileStateDown
end

compile meta_inline asm compileStateDown end
compile meta_elem asm compileStateDown end
compile meta_data asm compileStateDown end
compile meta_value asm compileStateDown end


compile meta_int asm astGetChildString 0 toI write_ocInt "push" compileStateNext end
compile meta_char asm astGetChildString 0 chr write_ocChar "push" compileStateNext end
compile meta_float asm astGetChildString 0 toF write_ocFloat "push" compileStateNext end
compile meta_string asm astGetChildString 0 write_ocString "push" compileStateNext end
compile meta_label_arg asm astGetChildString 0 write_ocString "push" compileStateNext end
compile meta_envsym_arg asm astGetChildString 0 write_ocString "push" compileStateNext end

compile meta_sym
asm
	astGetChildString 0
	write_ocString "push"
	compileStateNext
end


compile meta_label
asm
	astCompileChild 0
	write_oc "write_label"
	compileStateNext
end


compile meta_oc_int
asm
	astCompileChild 1
	astCompileChild 0
	write_oc "write_ocInt"
	compileStateNext
end

compile meta_oc_char
asm
	astCompileChild 1
	astCompileChild 0
	write_oc "write_ocChar"
	compileStateNext
end


compile meta_oc_float
asm
	astCompileChild 1
	astCompileChild 0
	write_oc "write_ocFloat"
	compileStateNext
end


compile meta_oc_string
asm
	astCompileChild 1
	astCompileChild 0
	write_oc "write_ocString"
	compileStateNext
end


compile meta_oc_label
asm
	astCompileChild 1
	astCompileChild 0
	write_oc "write_ocLabel"
	compileStateNext
end


compile meta_oc_envsym
asm
	astCompileChild 1
	astCompileChild 0
	write_oc "write_ocEnvSym"
	compileStateNext
end


compile meta_oc_noarg asm
	astCompileChild 0
	write_oc "write_oc"
	compileStateNext
end





