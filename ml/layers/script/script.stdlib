require "script_compiler.wc"

#################################################################################
# Standard library for tinyaml script language.					#
#										#
# All functions are grouped in the global environment as follows :		#
# - &Compiler : contains all compilation-oriented functions.			#
# - &String : string manipulation.						#
#										#
#################################################################################

script
	function export(sym,val)
		print("exporting '",sym,"'=",val,"\\n")
		#asm getmem -2 getmem -1 envAdd end
		asm +$val +$sym envAdd end
	end
	function addTo(name,field,value)
		print("adding '",field,"'=",value," to group '",name,"'\n")
		asm getmem -3 getmem -1 envGet getmem -2 mapSet push 0 end
	end
	function exportGroup(name)
#		print "exporting Group '",name,"\\n"
		asm mapNew getmem -1 envAdd end
	end
	function strcmp(a,b)
		local r
		asm getmem -1 getmem -2 strcmp -$r end
		return r
	end

	export("export",export)

	exportGroup("String")

	addTo("String","compare",strcmp)
	addTo("String","length",
		function(a)
			local r
			asm getmem -1 strlen -$r end
			return r
		end)
	addTo("String","append",
		function(a,b)
			local r
			asm getmem -1 getmem -2 strcat -$r end
			return r
		end)
	addTo("String","charAt",
		function(str,i) local r asm getmem -1 getmem -2 charAt -$r end return r end)
	addTo("String","setCharAt",
		function(str,i,c) asm getmem -1 getmem -3 getmem -2 setCharAt end end)

	exportGroup("Compiler")

	addTo("Compiler","setState",
		function(n)
			if not strcmp(n,"down") then asm compileStateDown end
			else	if not strcmp(n,"next") then asm compileStateNext end
				else	if not strcmp(n,"error") then asm compileStateError end
					else	if not strcmp(n,"done") then asm compileStateDone end
						else if not strcmp(n,"up") then asm compileStateUp end end
						end
					end
				end
			end
		end)
	addTo("Compiler","toto",
		function(x) print("Toto ",x,"\n") end)
	addTo("Compiler","opcodeNoArg",
		function(oc) asm getmem -1 write_oc end end)
	addTo("Compiler","opcodeInt",
		function(oc,arg) asm getmem -2 getmem -1 write_ocInt end end)
	addTo("Compiler","opcodeFloat",
		function(oc,arg) asm getmem -2 getmem -1 write_ocFloat end end)
	addTo("Compiler","opcodeLabel",
		function(oc,arg) asm getmem -2 getmem -1 write_ocLabel end end)
	addTo("Compiler","opcodeString",
		function(oc,arg) asm getmem -2 getmem -1 write_ocString end end)
	addTo("Compiler","opcodeEnvSym",
		function(oc,arg) asm getmem -2 getmem -1 write_ocEnvSym end end)
	addTo("Compiler","label",
		function(label) asm getmem -1 write_label end end)
	addTo("Compiler","data",
		function(data,rep) asm getmem -1 getmem -2 write_data end end)
	addTo("Compiler","printNode",
		function() asm pp_curNode end end)
	addTo("Compiler","getChildString",
		function(i) local r asm getmem -1 astGetChildString -$r end return r end)
	addTo("Compiler","getChildrenCount",
		function() local r asm astGetChildrenCount -$r end return r end)
	addTo("Compiler","compileChild",
		function(i) asm getmem -1 astCompileChild end end)
	addTo("Compiler","walk",
		function(walkerName) asm getmem -1 doWalk end end)

	exportGroup("Array")
	function _anew(args...) return args end
	addTo("Array","new", _anew)		# thanks vararg algorithm ;)
	addTo("Array","size",
		function(a) asm +$a arraySize -$a end return a end)
	function _afe(a,f)
		local i,j
		asm getmem -3 arraySize setmem -2 end
		i=0
		while i<j do
			f(i,a[i])
			i=i+1
		end
	end
	addTo("Array","apply",
		function(a,f)
			local i,j
			asm getmem -3 arraySize setmem -2 end
			i=0
			while i<j do
				a[i] = f(i,a[i])
				i=i+1
			end
		end)
	addTo("Array","foreach", _afe)
	function _af(a,p)
		local i,j,k,ret
		asm getmem -5 arraySize setmem -3 end
		i,j=0,0
		ret=_anew()
		while i<k do
			if p(a[i]) then
				ret[j]=a[i]
				j=j+1
			end
			i=i+1
		end
		return ret
		end
	addTo("Array", "filter", _af)
	function _ari(a,f,init)
		local accum
		accum=init
		_afe(a, function(x) accum = f(accum, x) end)
		return accum
	end
	function _ar(a,f)
		local accum,i,j
		asm getmem -4 arraySize setmem -3 end
		i=2
		accum=f(a[0],a[1])
		while i<j do
			accum=f(accum,a[i])
			i=i+1
		end
		return accum
	end
	addTo("Array", "reducei", _ari)
	addTo("Array", "reduce", _ar)

	exportGroup("SymTab")
	addTo("SymTab","new",
		function() local r asm newSymTab -$r end return r end)
	addTo("SymTab","size",
		function(st) local r asm getmem -1 symTabSz -$r end return r end)

	exportGroup("Thread")
	#function _tn(prio, thread)
	#	local ret
	#	asm +$prio +$thread newThread -$ret end
	#	return ret
	#end
	function _tn(prio, thread)
		local r
		asm +$prio +$thread newThread -$r end
		return r
	end
	function _tj(thread)
		asm +$thread joinThread end
	end
	addTo("Thread","new",_tn)
	addTo("Thread","join",_tj)
	addTo("Thread","PID", function() local r asm getPid -$r end return r end)

end

