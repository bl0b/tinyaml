# Symbolic layer for the assembly language.
# Author : Damien "bl0b" Leroux
#
# handles a global symbol table for program's data segment
# and symbolic access to structured types.
#
# TODO : handle local frames also
#

#require "metasm.melang"
require "metasm.wc"

data
	0	# 0 : symtab of struct names
	0	# 1 : array of struct fields tables
	0	# 2 : symtab to map the data segment
	0	# 3 : int counter for unique labels

	0	# 4 : symtab of local frame
	0	# 5 : stack of local frames (symtabs)
	0	# 6 : relative offset to peek symtab at from local frames stack
	0	# 7 : symtab of current closure symbols
end

asm
	nop
	nop
	dynFunNew @__init_symasm dup 0 push "__init_symasm" envAdd 	# I: none, O: none
	dup 0 onCompInit
	call
	dynFunNew @globSymTabNew push "_GSTNew" envAdd			# I: none, O: none
	dynFunNew @getGlobSym push "_GSTGet" envAdd			# I: none, O: none
	dynFunNew @addGlobSym push "_GSTAdd" envAdd			# I: none, O: none
	dynFunNew @GSTFindSym push "_GSTFindSym" envAdd			# I: str (sym), O: int (sym ofs, -1 == not found)
	dynFunNew @closureSymTabNew push "_CSTNew" envAdd			# I: none, O: none
	dynFunNew @CSTAdd push "_CSTAdd" envAdd				# I: str (sym), O: none
	dynFunNew @CSTFindSym push "_CSTFindSym" envAdd			# I: str (sym), O: int (sym ofs, -1 == not found)
	dynFunNew @locSymTabNew push "_LSTNew" envAdd			# I: none, O: none
	dynFunNew @addLocSym push "_LSTAdd" envAdd			# I: none, O: none
	dynFunNew @LSTPop push "_LSTPop" envAdd				# I: none, O: none
	dynFunNew @LSTStackSize push "_LSTStackSize" envAdd		# I: none, O: int (item count)
	dynFunNew @LSTSelect push "_LSTSelect" envAdd			# I: int (rel ofs of selected frame in stack), O: none
	dynFunNew @LSTGetSize push "_LSTGetSize" envAdd			# I: none, O: int (symtab size)
	dynFunNew @LSTFindSym push "_LSTFindSym" envAdd			# I: str (sym), O: int (sym ofs, -1 == not found)
	#dynFunNew @getSymOfs push "getSymOfs" envAdd
	call @__init_symasm
	jmp @_skip_0

__init_symasm:
	newSymTab setmem 0
	arrayNew setmem 1
	stackNew setmem 5
	getmem 5 newSymTab stackPush
	call @globSymTabNew
	call @closureSymTabNew
	call @locSymTabNew
	ret 0

#
# calling convention : args and return are pushed onto data stack. callee must free stack.
#

LSTPush:
	getmem 5 getmem 4 stackPush
	push 0 setmem 6			# reset frame selection register
	ret 0

LSTPop:
	getmem 5 stackPop
	getmem 5 stackPeek 0 setmem 4
	push 0 setmem 6			# reset frame selection register
	ret 0

LSTStackSize:
	getmem 5 stackSize
	ret 0

LSTSelect:
	setmem 6
	ret 0

LSTGetSize:
	getmem 5 getmem 6 stackPeek symTabSz
	ret 0

STDump:
	enter 3
		setmem -3			# symtab
		push 1 setmem -1		# counter
		getmem -3 symTabSz setmem -2	# size

		push "SymTab " getmem -3 push " contents : (" getmem -2 dec push " elements)\n" print 5

	_stdump_lp:
		getmem -1 getmem -2 supEq SZ jmp@_stdump_done
		push "#" getmem -1 push " : " print 3
		getmem -3 getmem -1 getSymName print 1
		push "\n" print 1
		getmem -1 inc setmem -1
		jmp@_stdump_lp
	_stdump_done:
	leave 3
	ret 0

LSTDumpAll:
	enter 2
	push 0 setmem -1		# counter
	getmem 5 stackSize setmem -2	# limit
_lda_lp:
	getmem -1 getmem -2 inf SNZ jmp@_lda_done
	push "#" getmem -1 push " " print 3
	getmem 5 getmem -1 stackPeek call @STDump
	getmem -1 inc setmem -1 jmp@_lda_lp
_lda_done:
	leave 2
	ret 0

LSTFindSym:
	enter 4
		setmem -3			# sym
		push 0 setmem -4		# base
		push 0 setmem -1		# counter
		getmem 5 stackSize setmem -2	# limit
	_lstfs_lp:
		#push "Searching for symbol '" getmem -3 push "' in locals symtab #" getmem -1 push "\\n" print 5
		#getmem 5 getmem -1 stackPeek call @STDump
		getmem 5 getmem -1 stackPeek getmem -3 getSym
		dup 0 push -1 nEq SZ jmp @_lstfs_ret		# if not -1, return
		pop
		getmem 5 getmem -1 stackPeek symTabSz dec getmem -4 add setmem -4	# base += symtab_size
		getmem -1 inc setmem -1
		getmem -1 getmem -2 nEq SZ jmp @_lstfs_lp		# while counter<stacksize
		push 1							# return error
		leave 4
		ret 0
	_lstfs_ret:
		getmem -4 add push 0 swap 1 sub
	leave 4
	ret 0

locSymTabNew:
	#push "new locSymTab Before\\n" print 1
	#call @LSTDumpAll
	newSymTab setmem 4
	call @LSTPush
	#push "new locSymTab After\\n" print 1
	#call @LSTDumpAll
	ret 0

getLocSym:
	# string:symbol on top of stack
	enter 1
		getmem 4
		dup -1
	getSym
	setmem -1
	push 0
	getmem -1
	sub
	leave 1
	#retval 1
	ret 0

addLocSym:
	enter 1
		setmem -1
		getmem 4
		getmem -1
	addSym
	leave 1
	ret 0

getLocCount:
	getmem 4
	symTabSz
	ret 0


closureSymTabNew:
	newSymTab setmem 7
	ret 0

CSTGet:
	# string:symbol on top of stack
		getmem 7
		dup -1
	getSym
	retval 1

CSTAdd:
	getmem 7 swap 1
	addSym
	ret 0


globSymTabNew:
	newSymTab
	dup 0 setmem 2
	#push "_globSymTab" envAdd
	ret 0

getGlobSym:
	# string:symbol on top of stack
		getmem 2
		dup -1
	getSym
	#push "getGlobSym " dup -1 push "\\n" print 3
	retval 1

addGlobSym:
	enter 1
		setmem -1
		#push "addGlobSym " getmem -1 push "\\n" print 3
		getmem 2
		getmem -1
	addSym
	leave 1
	ret 0

getStruc:
	# string:struc_name on top of stack
		getmem 2
			getmem 0
			dup -2
		getSym
	arrayGet
	retval 1

# string:something -> string:label
_sa_gen_lbl:
	getmem 3 inc setmem 3
	push "_" getmem 3 toS strcat strcat
	ret 0

_skip_0:
	nop
end

language
	GlobSymTab ::= "glob" GlobSym+ "end".
	GlobSym ::= sym "=" ( gs_Float | gs_Int | gs_String ).

	gs_Int ::= int.
	gs_Float ::= float.
	gs_String ::= string.

	GlobGet ::= "+" "$" sym.
	GlobSet ::= "-" "$" sym.
	GlobIdx ::= "$" sym.

	EnvGet ::= "+" "&" sym.
	EnvSet ::= "-" "&" sym.
	EnvIdx ::= "&" sym.

	LocalFrame ::= "local" LocalSymbols "{" SubAsmBloc "}".
	LocalSymbols ::= _epsilon (sym ",")* sym.

	Struc ::= "struc" sym "{" sym+ "}".
	StrucNew ::= "strucNew" sym "{" struc_item+ "}".
	StrucGet ::= "+" "(" sym "." sym ")".
	StrucSet ::= "-" "(" sym "." sym ")".
	struc_item = sym ":" ( AsmBloc | p_Opcode ).

	SubAsmBloc::=asm_statement+.
	IfElseNZ ::= "[[" SubAsmBloc "][" SubAsmBloc "]]".
	IfNZ ::= "[" SubAsmBloc "]".

	sab_c = ( "]" | asm_statement sab_c ).
	sab_cc = ( "]]" | asm_statement sab_cc ).
	sab_co = ( "][" | asm_statement sab_co ).

	#symasm_illeg = ( "enter" | "leave" | "getmem" | "setmem" ).
end

plug IfNZ into p_Opcode
plug IfElseNZ into p_Opcode
plug GlobSymTab into p_Data
plug Struc into p_ProgramTopLevel
plug GlobGet into p_Opcode
plug GlobSet into p_Opcode
plug GlobIdx into p_Opcode
plug StrucNew into p_Opcode
plug StrucGet into p_Opcode
plug StrucSet into p_Opcode
plug LocalFrame into p_Opcode
#plug symasm_illeg into p_Opcode_Illegal

compile SubAsmBloc asm
	compileStateDown
	ret 0

	enter 1
		push 0 setmem -1
sab_loop:
		getmem -1 astGetChildrenCount sub SNZ jmp @sab_done

		getmem -1 astCompileChild

		getmem -1 inc setmem -1
		jmp @sab_loop
sab_done:
	leave 1
	compileStateNext
end

compile IfNZ asm
	enter 1
	push "endif" call @_sa_gen_lbl setmem -1
# SNZ jmp _end
# ...
# _end:
#
	<< SNZ jmp l(getmem -1) >>
	astCompileChild 0
	<< (getmem -1): >>
	leave 1
	compileStateNext
end

compile IfElseNZ asm
	enter 2
	#pp_curNode
	push "else" call @_sa_gen_lbl setmem -1
	push "endif" call @_sa_gen_lbl setmem -2
	<< SNZ jmp l(getmem -1) >>
	#astGetRow push ":" astGetCol push " " getmem -2 push "\\n" print 6
	astCompileChild 0

	#astGetRow push ":" astGetCol push " " getmem -2 push "\\n" print 6

	<< jmp l(getmem -2) (getmem -1): >>
	astCompileChild 1
	<< (getmem -2): >>
	leave 2
	compileStateNext
end



compile gs_Int asm
	push 1			# rep
	astGetChildString 0 toI	# init value
	write_data		#
	compileStateNext
end

compile gs_Float asm
	push 1			# rep
	astGetChildString 0 toF	# init value
	write_data		#
	compileStateNext
end

compile gs_String asm
	push 1			# rep
	astGetChildString 0	# init value
	write_data		#
	compileStateNext
end

compile GlobSym asm
	astGetChildString 0
	call @addGlobSym
	astCompileChild 1
	compileStateNext
end



compile GlobSymTab asm
	call @globSymTabNew
	push 1 push 0 write_data	# reserve one empty data at offset #0

	enter 2
		astGetChildrenCount
	setmem -2
		push 0
	setmem -1
_fill_glob_loop:
			getmem -1
			getmem -2
		inf
	SNZ jmp @_done_glob_loop

		getmem -1
	astCompileChild

	getmem -1 inc setmem -1
	jmp @_fill_glob_loop
_done_glob_loop:
	leave 2
	compileStateNext
end


compile LocalSymbols asm
	call @locSymTabNew
	enter 1
	push 0 setmem -1
_fill_loc_loop:

	getmem -1 astGetChildString call @addLocSym

	getmem -1 inc setmem -1
	getmem -1 astGetChildrenCount inf SZ jmp @_fill_loc_loop

	leave 1
	compileStateNext
end


compile LocalFrame asm
	astCompileChild 0
	enter 1
	getmem 4 symTabSz dec setmem -1

	getmem -1 SNZ jmp @_no_enter
	<< enter i(getmem -1) >>
_no_enter:
	astCompileChild 1

	getmem -1 SNZ jmp @_no_leave
	<< leave i(getmem -1) >>
_no_leave:

	leave 1

	# reinit the symbol table
	call @LSTPop

	compileStateNext
end



compile Struc asm
	enter 2
	newSymTab setmem -1
	push 1 setmem -2
_fill_struc_loop:
	getmem -2 astGetChildrenCount inf SNZ jmp @done_fill_struc_loop
			getmem -1
				getmem -2
			astGetChildString
		addSym

		getmem -2 inc setmem -2
		jmp @_fill_struc_loop
done_fill_struc_loop:
			getmem 0
			astGetChildString 0
		addSym
			getmem 1
			getmem -1
				getmem 0
				astGetChildString 0
			getSym
		arraySet
		pop
	leave 2
	compileStateNext
end


compile StrucNew asm
	enter 2
			getmem 1
				getmem 0
				astGetChildString 0
			getSym
		arrayGet
		setmem -2

		<< arrayNew arrayResv i(astGetChildrenCount dec shr 1) >>

		#write_oc "arrayNew"

		#	push "children count : "
		#	astGetChildrenCount
		#	push "\\n"
		#print 3

		#	astGetChildrenCount dec shr 1
		#write_ocInt "arrayResv"

			push 1
		setmem -1

_fill_newstruc_loop:
				getmem -1
				astGetChildrenCount
			sub
		SNZ jmp @_done_newstruc_loop

		#	push "compiling #"
		#	getmem -1 shr 1 inc
		#	push "\\n"
		#print 3
			getmem -1 inc
		astCompileChild
		<< arraySet i( getmem -2 getmem -1 astGetChildString getSym dec) >>

		getmem -1 add 2 setmem -1
		jmp @_fill_newstruc_loop
_done_newstruc_loop:
	leave 2
	compileStateNext
end

compile StrucGet asm
			getmem 1
				getmem 0
				astGetChildString 0
			getSym
		arrayGet
		astGetChildString 1
	getSym dec
	write_ocInt "arrayGet"
	compileStateNext
end

compile StrucSet asm
			getmem 1
				getmem 0
				astGetChildString 0
			getSym
		arrayGet
		astGetChildString 1
	getSym dec
	write_ocInt "arraySet"
	compileStateNext
end



compile GlobGet asm
	astGetChildString 0
	call @LSTFindSym
	dup 0 dec SZ jmp @_write1 # getLocSym returns 1 on failure, because getSym returns -1
	pop

	astGetChildString 0
	call @CSTGet
	dup 0 inc SZ jmp @_write0
	pop
	
	astGetChildString 0
	call @getGlobSym
	dup 0 inc SNZ jmp @globUnknown
_write1:
	write_ocInt "getmem"
	compileStateNext
	ret 0
_write0:
	write_ocInt "getClosure"
	compileStateNext
end


compile GlobSet asm
	astGetChildString 0
	call @LSTFindSym
	dup 0 dec SZ jmp @_write2

	astGetChildString 0
	call @getGlobSym
	dup 0 inc SNZ jmp @globUnknown
_write2:
	write_ocInt "setmem"
	compileStateNext
end

compile GlobIdx asm
	astGetChildString 0
	call @getLocSym
	dup 0 dec SZ jmp @_write3
	astGetChildString 0
	call @getGlobSym
	dup 0 inc SNZ jmp @globUnknown
_write3:
	write_ocInt "push"
	compileStateNext
end


asm
	ret 0
globUnknown:
	pop
	push "[SymAsm] Unknown symbol '" astGetChildString 0 push "' At " astGetRow push ":" astGetCol
	push "\n"
	print 7
	compileStateError
	ret 0
end

