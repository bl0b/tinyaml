# Grammar for the Meta-language
#
#

id = /[_a-zA-Z][0-9_a-zA-Z-]*/.


#####################################################################
#
# Evaluable atoms
#
#####################################################################

String ::= "\"" /[^"]*/ "\"".
Float ::= /-?(0|[1-9][0-9]*)\\.[0-9]+/.
Integer ::= /-?(0|[1-9][0-9]*)/.
CFunc ::= "CFunc" "(" <func_name> ")".

p_EvalAtom = ( <REF> | <String> | <Float> | <Integer> | <CFunc> ).


#####################################################################
#
# Contents
#
#####################################################################

FILENAME ::= epsilon.
func_name = <optional_file_name> <id>.
file_name = /[^:]+/.
optional_file_name = [( <file_name> ":" | //)] <FILENAME>.

sub_message = "[" <p_Message> "]".

REF ::= <id>.

p_Evaluable = (<p_EvalAtom>|<sub_message>|<DEFERRED>).

MESSAGE ::= ( <MESSAGE> <message_rhs> | <p_Evaluable> <message_rhs> ).
message_rhs = <id> <param_seq>.
param_seq = ( <PARAM> <param_seq> | epsilon ).

p_Message = (<MESSAGE>|<p_EvalAtom>).

PARAM ::= <id> ":" <p_Evaluable>.

DEFERRED ::= "[[" <msg_seq_loop> "]]".

MSG_SEQ ::= <msg_seq_loop>.
msg_seq_loop = <p_Message> ((","|".") <msg_seq_loop>|epsilon).


#####################################################################
#
# Main body
#
#####################################################################


BODY ::= <body_loop>.
body_loop = <p_BodyElem> (<body_loop> | epsilon).
p_BodyElem = ( <MSG_SEQ> | <Grammar> ).


#####################################################################
#
# Meta-Grammar section (copied from tinyap's meta-grammar)
#
#####################################################################

#Grammar ::= ".Rules" "{" <rule_loop>.
Grammar ::= "{" <rule_loop>.
rule_loop = ( "}" | <rule> <rule_loop>).

elem = /[_a-zA-Z][0-9a-zA-Z_]*/ .
T ::= ( "\"" "\" /["]/ "\""  | "\"" /[^"]+/ "\""  ) .
NT ::= "<" <elem> ">"  .
RE ::= "/" /((\[[^\\]]*(\])?[^\]]*])|[^/])*/ "/"  .
rule = ( <OperatorRule> | <TransientRule> ) .
OperatorRule ::= <elem> "::=" <rule_expr> "."  .
TransientRule ::= <elem> "=" <rule_expr> "."  .
rule_expr = ( <Alt> | <Seq> | <rule_elem> ) .
Prefix ::= "[" <rule_expr> "]" <rule_elem>  .
Seq ::= <rule_elem> <seq_expr>  .
Alt ::= "(" <alt_expr> ")"  .
seq_expr = ( <rule_elem> <seq_expr>  | <rule_elem> ) .
alt_expr = ( <rule_elem> "|" <alt_expr>  | <Seq> "|" <alt_expr>  | <Seq> | <rule_elem> ) .
rule_elem = ( <T> | <NT> | <RE> | <Alt> | <EOF> | <epsilon> | <Prefix> ) .
EOF ::= "EOF" .
epsilon ::= "epsilon" .



#####################################################################
#
# Standard whitespace and comments
#
#####################################################################


_whitespace = /([ \r\n\t]|#[^\r\n]*[\r\n]+)+/.


#####################################################################
#
# Entry point
#
#####################################################################


_start = <BODY>.




