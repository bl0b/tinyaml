        lib

      # stack management
        opcode push:Int
        opcode push:Float
        opcode push:String
       #opcode push:Opcode
        opcode pop
        opcode pop:Int          # pop n values
        opcode dup:Int          # duplicate n-th value on top of stack

      # objects
        opcode clone

      # tests

        opcode inf
        opcode sup
        opcode eq
        opcode nEq
        opcode infEq
        opcode supEq

        opcode SZ               # skip next instruction if zero
        opcode SNZ              # skip next instruction if non zero
      # jumps
        opcode jmp:Label        # relative intra-segment jump
      # call stack
        opcode call             # call a function object
        opcode call:Label       # intra-segment call
        opcode lcall:Label      # pop segment then perform long call
        opcode retval:Int       # copy stack top then pop out n values
                                # then poke old stack top then return
        opcode ret:Int          # pop out n values then return

      # function objects
        opcode dynFunNew:Label    # push func obj
        opcode dynFunAddClosure   # pop (data to clone), peek func obj
        opcode getClosure:Int     # pop (data to clone), peek func obj
        opcode getClosure         # pop (data to clone), peek func obj

      # address space management
        opcode enter:Int        # reserve n local variables
        opcode leave:Int        # undo previous enter

        opcode getClosure:Int

        opcode getmem:Int       # n>0  : push n-th global data
                                # n<=0 : push n-th local data
        opcode setmem:Int       # pop data into mem cell #n (see above)
        opcode getmem           # pop n from data stack then getmem n
        opcode setmem           # pop n from data stack then setmem n
      # bin&arith
        opcode shr              # shift right
        opcode shr:Int          # shift right n bits
        opcode vshr             # pop n then shift right n bits

        opcode shl              # shift left
        opcode shl:Int          # shift left n bits
        opcode vshl             # pop n then shift left n bits

        opcode and
        opcode or
        opcode not
        opcode xor
        opcode and:Int
        opcode or:Int
        opcode xor:Int

        opcode inc
        opcode dec

        opcode mod
        opcode mod:Int
        opcode mod:Float

        opcode add              # use two values on top of stack
        opcode sub
        opcode mul
        opcode div

        opcode add:Int          # use top of stack and immed value
        opcode sub:Int
        opcode mul:Int
        opcode div:Int

        opcode add:Float
        opcode sub:Float
        opcode mul:Float
        opcode div:Float
      # AST manipulation
        opcode astGetOp
        opcode astGetChildString
        opcode astGetChildString:Int
        opcode astGetChildrenCount
        opcode astCompileChild:Int
        opcode astCompileChild

      # compiler manipulation
        opcode __addCompileMethod:Label
        opcode write_data               # pop data, pop rep, write
        opcode write_label:String
        opcode write_label
        opcode write_oc:String
        opcode write_oc_Int:String
        opcode write_oc_Float:String
        opcode write_oc_Label:String
        opcode write_oc_String:String
        opcode write_oc_EnvSym:String

        opcode compileStateNext
        opcode compileStateDown
        opcode compileStateUp
        opcode compileStateDone
        opcode compileStateError

        opcode pp_curNode

        #opcode _pop_curNode

        opcode _langDef:String
        opcode _langPlug:String         # pop plug

        opcode compileString

        opcode doWalk:String            # walk current node with named
        opcode doWalk                   # walker, or pop name from stack
        opcode walkChild:Int            # perform walking on this child
        opcode walkChild

      # handling symbol tables
        opcode newSymTab                # create a new sym tab and push
                                        # it onto data stack
        opcode symTabSz
        opcode getSym                   #pop key, pop table, push result
        opcode addSym                   # pop key, pop table

      # runtime environment
        opcode envNew
        opcode envLookup                # [symbol] => offset
        opcode envGet:EnvSym
        opcode envSet:EnvSym
        opcode envAdd

      # handling arrays
        opcode arrayNew
        opcode arrayResv:Int
        opcode arrayResv
        opcode arrayGet:Int
        opcode arrayGet
        opcode arraySet:Int
        opcode arraySet
        opcode arraySize

      # handling object stacks
        opcode stackNew
        opcode stackPush
        opcode stackPop
        opcode stackPeek
        opcode stackPop:Int
        opcode stackPeek:Int
        opcode stackSize

      # string operations
        opcode strcmp:String
        opcode strcat:String
        opcode strdup:String
        opcode strcmp
        opcode strcat
        opcode strdup
        opcode strlen
        opcode charAt:Int
        opcode setCharAt:Int
        opcode charAt
        opcode setCharAt
        opcode substr

      # basic conversions
        opcode toS
        opcode toI
        opcode toF

      # threading
        opcode newThread:Label          # pop prio
        opcode getPid                   # push int
        opcode yield                    # yield current thread
        opcode joinThread               # pop int thread pid
        opcode killThread               # pop int thread pid

        opcode newMtx
        opcode lockMtx:Int              # ref a memcell
        opcode unlockMtx:Int            # same
        opcode lockMtx                  # pop int memcell
        opcode unlockMtx                # same


      # FIXME: output and debug mechanisms
        opcode print:Int





        end

