# Symbolic layer for the assembly language.
# Author : Damien "bl0b" Leroux
#
# handles a global symbol table for program's data segment
# and symbolic access to structured types.
#
# TODO : handle local frames also
#

require "metasm.melang"
#require "metasm.wc"

data
	0	# 0 : symtab of struct names
	0	# 1 : array of struct fields tables
	0	# 2 : symtab to map the data segment
	0	# 3 : int counter for unique labels

	0	# 4 : symtab of local frame
end

asm
	newSymTab setmem 0
	arrayNew setmem 1
	call @globSymTabNew
	call @locSymTabNew
	dynFunNew @globSymTabNew push "_globSymTabNew" envAdd
	dynFunNew @locSymTabNew push "_locSymTabNew" envAdd
	jmp @_skip_0



#
# calling convention : args and return are pushed onto data stack. callee must free stack.
#

locSymTabNew:
	newSymTab
	dup 0 setmem 4
	push "_locSymTab" envAdd
	ret 0

getLocSym:
	# string:symbol on top of stack
	enter 1
		getmem 4
		dup -1
	getSym
	setmem -1
	#push "getLocSym " getmem -1 push "\\n" print 3
	push 0
	getmem -1
	sub
	leave 1
	#push "getLocSym " dup -1 push "\\n" print 3
	#retval 1
	ret 0

addLocSym:
	enter 1
		setmem -1
		#push "addLocSym " getmem -1 push "\\n" print 3
		getmem 4
		getmem -1
	addSym
	leave 1
	ret 0

getLocCount:
	getmem 4
	symTabSz
	ret 0


globSymTabNew:
	newSymTab
	dup 0 setmem 2
	push "_globSymTab" envAdd
	ret 0

getGlobSym:
	# string:symbol on top of stack
		getmem 2
		dup -1
	getSym
	#push "getGlobSym " dup -1 push "\\n" print 3
	retval 1

addGlobSym:
	enter 1
		setmem -1
		#push "addGlobSym " getmem -1 push "\\n" print 3
		getmem 2
		getmem -1
	addSym
	leave 1
	ret 0

getStruc:
	# string:struc_name on top of stack
		getmem 2
			getmem 0
			dup -2
		getSym
	arrayGet
	retval 1

# string:something -> string:label
gen_label:
	getmem 3 inc setmem 3
	push "_" getmem 3 toS strcat strcat
	ret 0

_skip_0:
	nop
end

language
	GlobSymTab ::= "glob" GlobSym+ "end".
	GlobSym ::= sym "=" ( gs_Float | gs_Int | gs_String ).

	gs_Int ::= int.
	gs_Float ::= float.
	gs_String ::= string.

	GlobGet ::= "+" "$" sym.
	GlobSet ::= "-" "$" sym.
	GlobIdx ::= "$" sym.

	EnvGet ::= "+" "&" sym.
	EnvSet ::= "-" "&" sym.
	EnvIdx ::= "&" sym.

	LocalFrame ::= "local" LocalSymbols "{" SubAsmBloc "}".
	LocalSymbols ::= _epsilon (sym ",")* sym.

	Struc ::= "struc" sym "{" sym+ "}".
	StrucNew ::= "strucNew" sym "{" struc_item+ "}".
	StrucGet ::= "+" "(" sym "." sym ")".
	StrucSet ::= "-" "(" sym "." sym ")".
	struc_item = sym ":" ( AsmBloc | p_Opcode ).

	SubAsmBloc::=asm_statement+.
	IfElseNZ ::= "[[" SubAsmBloc "][" SubAsmBloc "]]".
	IfNZ ::= "[" SubAsmBloc "]".

	sab_c = ( "]" | asm_statement sab_c ).
	sab_cc = ( "]]" | asm_statement sab_cc ).
	sab_co = ( "][" | asm_statement sab_co ).
end

plug IfNZ into p_Opcode
plug IfElseNZ into p_Opcode
plug GlobSymTab into p_Data
plug Struc into p_ProgramTopLevel
plug GlobGet into p_Opcode
plug GlobSet into p_Opcode
plug GlobIdx into p_Opcode
plug StrucNew into p_Opcode
plug StrucGet into p_Opcode
plug StrucSet into p_Opcode
plug LocalFrame into p_Opcode

compile SubAsmBloc asm
	compileStateDown
	ret 0

	enter 1
		push 0 setmem -1
sab_loop:
		getmem -1 astGetChildrenCount sub SNZ jmp @sab_done

		getmem -1 astCompileChild

		getmem -1 inc setmem -1
		jmp @sab_loop
sab_done:
	leave 1
	compileStateNext
end

compile IfNZ asm
	enter 1
	push "endif" call @gen_label setmem -1
# SNZ jmp _end
# ...
# _end:
#
	<< SNZ jmp l(getmem -1) >>
	astCompileChild 0
	<< (getmem -1): >>
	leave 1
	compileStateNext
end

compile IfElseNZ asm
	enter 2
	#pp_curNode
	push "else" call @gen_label setmem -1
	push "endif" call @gen_label setmem -2
	<< SNZ jmp l(getmem -1) >>
	#astGetRow push ":" astGetCol push " " getmem -2 push "\\n" print 6
	astCompileChild 0

	#astGetRow push ":" astGetCol push " " getmem -2 push "\\n" print 6

	<< jmp l(getmem -2) (getmem -1): >>
	astCompileChild 1
	<< (getmem -2): >>
	leave 2
	compileStateNext
end



compile gs_Int asm
	push 1			# rep
	astGetChildString 0 toI	# init value
	write_data		#
	compileStateNext
end

compile gs_Float asm
	push 1			# rep
	astGetChildString 0 toF	# init value
	write_data		#
	compileStateNext
end

compile gs_String asm
	push 1			# rep
	astGetChildString 0	# init value
	write_data		#
	compileStateNext
end

compile GlobSym asm
	astGetChildString 0
	call @addGlobSym
	astCompileChild 1
	compileStateNext
end



compile GlobSymTab asm
	call @globSymTabNew
	push 1 push 0 write_data	# reserve one empty data at offset #0

	enter 2
		astGetChildrenCount
	setmem -2
		push 0
	setmem -1
_fill_glob_loop:
			getmem -1
			getmem -2
		inf
	SNZ jmp @_done_glob_loop

		getmem -1
	astCompileChild

	getmem -1 inc setmem -1
	jmp @_fill_glob_loop
_done_glob_loop:
	leave 2
	compileStateNext
end


compile LocalSymbols asm
	call @locSymTabNew
	enter 1
	push 0 setmem -1
_fill_loc_loop:

	getmem -1 astGetChildString call @addLocSym

	getmem -1 inc setmem -1
	getmem -1 astGetChildrenCount inf SZ jmp @_fill_loc_loop

	leave 1
	compileStateNext
end


compile LocalFrame asm
	astCompileChild 0
	enter 1
	getmem 4 symTabSz dec setmem -1

	getmem -1 SNZ jmp @_no_enter
	<< enter i(getmem -1) >>
_no_enter:
	astCompileChild 1

	getmem -1 SNZ jmp @_no_leave
	<< leave i(getmem -1) >>
_no_leave:

	leave 1

	# reinit the symbol table
	call @locSymTabNew

	compileStateNext
end



compile Struc asm
	enter 2
	newSymTab setmem -1
	push 1 setmem -2
_fill_struc_loop:
	getmem -2 astGetChildrenCount inf SNZ jmp @done_fill_struc_loop
			getmem -1
				getmem -2
			astGetChildString
		addSym

		getmem -2 inc setmem -2
		jmp @_fill_struc_loop
done_fill_struc_loop:
			getmem 0
			astGetChildString 0
		addSym
			getmem 1
			getmem -1
				getmem 0
				astGetChildString 0
			getSym
		arraySet
		pop
	leave 2
	compileStateNext
end


compile StrucNew asm
	enter 2
			getmem 1
				getmem 0
				astGetChildString 0
			getSym
		arrayGet
		setmem -2

		<< arrayNew arrayResv i(astGetChildrenCount dec shr 1) >>

		#write_oc "arrayNew"

		#	push "children count : "
		#	astGetChildrenCount
		#	push "\\n"
		#print 3

		#	astGetChildrenCount dec shr 1
		#write_ocInt "arrayResv"

			push 1
		setmem -1

_fill_newstruc_loop:
				getmem -1
				astGetChildrenCount
			sub
		SNZ jmp @_done_newstruc_loop

		#	push "compiling #"
		#	getmem -1 shr 1 inc
		#	push "\\n"
		#print 3
			getmem -1 inc
		astCompileChild
		<< arraySet i( getmem -2 getmem -1 astGetChildString getSym dec) >>

		getmem -1 add 2 setmem -1
		jmp @_fill_newstruc_loop
_done_newstruc_loop:
	leave 2
	compileStateNext
end

compile StrucGet asm
			getmem 1
				getmem 0
				astGetChildString 0
			getSym
		arrayGet
		astGetChildString 1
	getSym dec
	write_ocInt "arrayGet"
	compileStateNext
end

compile StrucSet asm
			getmem 1
				getmem 0
				astGetChildString 0
			getSym
		arrayGet
		astGetChildString 1
	getSym dec
	write_ocInt "arraySet"
	compileStateNext
end



compile GlobGet asm
	astGetChildString 0
	call @getLocSym
	dup 0 SZ jmp @_write1
	astGetChildString 0
	call @getGlobSym
	dup 0 SNZ jmp @globUnknown
_write1:
	write_ocInt "getmem"
	compileStateNext
end


compile GlobSet asm
	astGetChildString 0
	call @getLocSym
	dup 0 SZ jmp @_write2
	astGetChildString 0
	call @getGlobSym
	dup 0 SNZ jmp @globUnknown
_write2:
	write_ocInt "setmem"
	compileStateNext
end

compile GlobIdx asm
	astGetChildString 0
	call @getLocSym
	dup 0 SZ jmp @_write3
	astGetChildString 0
	call @getGlobSym
	dup 0 SNZ jmp @globUnknown
_write3:
	write_ocInt "push"
	compileStateNext
end


asm
	ret 0
globUnknown:
	pop
	push "Unknown symbol '" astGetChildString 0 push "' At" astGetRow push ":" astGetCol
	push "\n"
	print 7
	compileStateError
	ret 0
end

